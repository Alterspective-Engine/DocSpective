name: Setup Repository Properties

on:
  push:
    branches: [main]

jobs:
  setup-properties:
    runs-on: ubuntu-latest
    if: github.run_number == 1  # Only run on first push to new repo
    
    steps:
      - name: Generate User Token for Copilot
        id: generate_user_token
        uses: actions/create-github-app-token@v1
        continue-on-error: true
        with:
          app-id: 1926973
          owner: ${{ github.repository_owner }}
          private-key: |
            -----BEGIN RSA PRIVATE KEY-----
            MIIEpAIBAAKCAQEAvYqSfVfTwQ3BeEgol2AEXGYkgJhs/JQfWZqWVKiKalpph1li
            PIe3kMo97zO33lWb4rFMS6V3ztI5AGHpNEPmzvcSmuQaxgCojBukQIjE+InP37Ko
            zZU5crppsKygft3l+8IqBk+byeBadbtBd1c60FdNZATVqWjspGy/8CzYjdA46X3m
            pTavliBbXQWb57N5r9Ol8d/LPomfnXaRwVxzde0Q9LELG9qp0co7+3YPxHbGHHTH
            QFHP4YE50cJFpJLUzfr+6kLcf5BhxhGSupDxo96Yd5sVeDrExpDphBPvra3vY8jL
            bRLYJKDGr1PXErd9KVDHwki/V3ceAOegM4iWRwIDAQABAoIBADbx0qFPMm1GRY1O
            raWkCd+XJIG6re1SKvxYmbeU2/sUln7L5HRTi10Ho4iR330uJ/BBITLUlrR3sFpy
            B55FCMV6TgRkl3ZKfpGO+cBTZXX+zSm1qsVdureNXlH+2M+uF5sxn+kQbsLIrLBw
            RfwIZ1450I9r71watG69r6458dS5xdsAfO4EOqVgKfRVjS8lA1+KyG9ybmacZVg0
            vOGISZiCbXU3HLpxG+gANc0sDhX8QJiHIIlx1dHIZvr4CEwBUriSAhER7g63Ho5G
            BkacKd/ihS3D2Q0JhPKpVjIu4diB4xqQhsXtZ8rRQvVn/vbaV/nuZUJmkvZTseac
            nenX0LECgYEA5Dx90QWx8xT1HypY/0ZTxghJm+omEwL+bj5snPuvW1i47WKAF29o
            3iW1SzMFRTn6a/dxcfZtSfBgIwO6m0FUpKhn4d3YiSc8nOcr6BHpB/SyAHsQftSl
            iHAtREVFoW3aeX5I1ag2TPfxZNgy9Z2vDAPVqh98UIw9OyMqZR89DfUCgYEA1JkU
            WhjHYBIYnyAcuy65mcZXWJ0nFeymVRJ45T7GTexDBBIyb1PA6q1LAV2cpi9BNy39
            vXhuP6kyOBjGstKUT6crGqKpq5knT55X9H5rRLHIdZgcbpQ9mAUF0f04tGYZUhm7
            /LBnZRdFvYr7MwYkZ7XLVJqG79G9PQmUh2VkUcsCgYEA0mtmv7+VaPuoZdxAAtHO
            yGO5oXJFOf/nnLIWpsBv0jLBA7JtT63aK/zt4O+f60vhsYqG37+G0MU5jO6SKzMX
            G1tbsuQ6D3DKNAn489MXWctiFIlhEt1v45MwWKHY6VSDOMGR2tFjhqCMwCGHEeUX
            jmc2pMq0bPpuNUhdfK9JNcUCgYEAqPoLHRl4zrlTbJbffz/CMaFeJ4axXFG+WvvV
            r5BXmfPhyEiWYboWKfEXHrzDF6uTkEIz3fbs2hinW8MFm3iYfT8HmaIUbdnLTxMy
            IZihtfYAuMbwQkv9MOk9GQzFl01XbtQZgNzNMaJvwhnHU2TcZrouJM611cPFP9Bv
            h7ZlKEUCgYAIL/jcDGu+U2BVYwRUHDPK04zBzVhSZN13ExsGm+J35VTdv+rMIZUQ
            c/5EGCC6BLFdztYzZJ2HD0k9YWZhrL3MHoW1BtXsY7x6KU9IWiet4nAu+n+JWnRP
            7J7voEI45xex6/SMMI7eBOKVFFXLV2B9XP7hyTzg3SVv4lOSYGR9jg==
            -----END RSA PRIVATE KEY-----
      
      - name: Generate Fallback Installation Token
        id: generate_installation_token
        if: steps.generate_user_token.outcome == 'failure'
        uses: actions/create-github-app-token@v1
        with:
          app-id: 1926973
          private-key: |
            -----BEGIN RSA PRIVATE KEY-----
            MIIEpAIBAAKCAQEAvYqSfVfTwQ3BeEgol2AEXGYkgJhs/JQfWZqWVKiKalpph1li
            PIe3kMo97zO33lWb4rFMS6V3ztI5AGHpNEPmzvcSmuQaxgCojBukQIjE+InP37Ko
            zZU5crppsKygft3l+8IqBk+byeBadbtBd1c60FdNZATVqWjspGy/8CzYjdA46X3m
            pTavliBbXQWb57N5r9Ol8d/LPomfnXaRwVxzde0Q9LELG9qp0co7+3YPxHbGHHTH
            QFHP4YE50cJFpJLUzfr+6kLcf5BhxhGSupDxo96Yd5sVeDrExpDphBPvra3vY8jL
            bRLYJKDGr1PXErd9KVDHwki/V3ceAOegM4iWRwIDAQABAoIBADbx0qFPMm1GRY1O
            raWkCd+XJIG6re1SKvxYmbeU2/sUln7L5HRTi10Ho4iR330uJ/BBITLUlrR3sFpy
            B55FCMV6TgRkl3ZKfpGO+cBTZXX+zSm1qsVdureNXlH+2M+uF5sxn+kQbsLIrLBw
            RfwIZ1450I9r71watG69r6458dS5xdsAfO4EOqVgKfRVjS8lA1+KyG9ybmacZVg0
            vOGISZiCbXU3HLpxG+gANc0sDhX8QJiHIIlx1dHIZvr4CEwBUriSAhER7g63Ho5G
            BkacKd/ihS3D2Q0JhPKpVjIu4diB4xqQhsXtZ8rRQvVn/vbaV/nuZUJmkvZTseac
            nenX0LECgYEA5Dx90QWx8xT1HypY/0ZTxghJm+omEwL+bj5snPuvW1i47WKAF29o
            3iW1SzMFRTn6a/dxcfZtSfBgIwO6m0FUpKhn4d3YiSc8nOcr6BHpB/SyAHsQftSl
            iHAtREVFoW3aeX5I1ag2TPfxZNgy9Z2vDAPVqh98UIw9OyMqZR89DfUCgYEA1JkU
            WhjHYBIYnyAcuy65mcZXWJ0nFeymVRJ45T7GTexDBBIyb1PA6q1LAV2cpi9BNy39
            vXhuP6kyOBjGstKUT6crGqKpq5knT55X9H5rRLHIdZgcbpQ9mAUF0f04tGYZUhm7
            /LBnZRdFvYr7MwYkZ7XLVJqG79G9PQmUh2VkUcsCgYEA0mtmv7+VaPuoZdxAAtHO
            yGO5oXJFOf/nnLIWpsBv0jLBA7JtT63aK/zt4O+f60vhsYqG37+G0MU5jO6SKzMX
            G1tbsuQ6D3DKNAn489MXWctiFIlhEt1v45MwWKHY6VSDOMGR2tFjhqCMwCGHEeUX
            jmc2pMq0bPpuNUhdfK9JNcUCgYEAqPoLHRl4zrlTbJbffz/CMaFeJ4axXFG+WvvV
            r5BXmfPhyEiWYboWKfEXHrzDF6uTkEIz3fbs2hinW8MFm3iYfT8HmaIUbdnLTxMy
            IZihtfYAuMbwQkv9MOk9GQzFl01XbtQZgNzNMaJvwhnHU2TcZrouJM611cPFP9Bv
            h7ZlKEUCgYAIL/jcDGu+U2BVYwRUHDPK04zBzVhSZN13ExsGm+J35VTdv+rMIZUQ
            c/5EGCC6BLFdztYzZJ2HD0k9YWZhrL3MHoW1BtXsY7x6KU9IWiet4nAu+n+JWnRP
            7J7voEI45xex6/SMMI7eBOKVFFXLV2B9XP7hyTzg3SVv4lOSYGR9jg==
            -----END RSA PRIVATE KEY-----
      
      - name: Debug Token Generation
        run: |
          echo "Repository owner: ${{ github.repository_owner }}"
          echo "App ID: 1926973"
          echo "Token generated: ${{ steps.generate_user_token.outputs.token != '' }}"
          echo "Token length: ${#GITHUB_TOKEN}"
        env:
          GITHUB_TOKEN: ${{ steps.generate_user_token.outputs.token }}
      
      - name: Check if properties already exist
        id: check_properties
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.generate_user_token.outputs.token || steps.generate_installation_token.outputs.token }}
          script: |
            try {
              const { data } = await github.rest.repos.getAllCustomProperties({
                owner: context.repo.owner,
                repo: context.repo.repo
              });
              
              const hasRole = data.some(prop => prop.property_name === 'role');
              core.setOutput('has_properties', hasRole);
              console.log('Properties check:', hasRole ? 'Found role property' : 'No role property found');
              return hasRole;
            } catch (error) {
              console.log('Error checking properties:', error.message);
              core.setOutput('has_properties', false);
              return false;
            }
      
      - name: Create setup issue for Copilot agent
        if: steps.check_properties.outputs.has_properties == 'false'
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.generate_user_token.outputs.token || steps.generate_installation_token.outputs.token }}
          script: |
            const issueBody = `## Repository Setup Required
            
            This repository was created from the SDD template and needs custom properties configured.
            
            ### Task: Set Repository Properties
            
            Please set the following custom repository properties using the GitHub API:
            
            1. **role**: Set to \`spec\` if this is a specification repository, or \`feature\` if this implements another specification
            2. **spec**: Only set this if role=feature - should contain the full repository slug of the spec this implements (e.g., "Avanavo/my-spec-repo")
            
            ### API Details
            Use the GitHub REST API endpoint:
            \`PATCH /repos/${context.repo.owner}/${context.repo.repo}/properties/values\`
            
            With JSON body:
            \`\`\`json
            {
              "properties": [
                { "property_name": "role", "value": "spec" },
                { "property_name": "spec", "value": null }
              ]
            }
            \`\`\`
            
            ### Expected Result
            After setting properties:
            - Comment on this issue confirming what values were set
            - Close this issue
            
            ### Default Recommendation
            Since this is a new repository, likely set \`role=spec\` unless the repository name or content clearly indicates it's a feature implementation.
            
            Repository: \`${context.repo.owner}/${context.repo.repo}\`
            `;
            
            // First check if Copilot agent is available
            console.log('Checking for Copilot agent availability...');
            const usingUserToken = '${{ steps.generate_user_token.outputs.token }}' !== '';
            console.log('Token type:', usingUserToken ? 'User token' : 'Installation token');
            console.log('User token generation success:', '${{ steps.generate_user_token.outcome }}');
            const repoQuery = `
              query($owner: String!, $name: String!) {
                repository(owner: $owner, name: $name) {
                  id
                  suggestedActors(capabilities: [CAN_BE_ASSIGNED], first: 100) {
                    nodes {
                      login
                      __typename
                      ... on Bot { id }
                      ... on User { id }
                    }
                  }
                }
              }
            `;
            
            console.log(`Querying repository: ${context.repo.owner}/${context.repo.repo}`);
            let repoData;
            try {
              repoData = await github.graphql(repoQuery, {
                owner: context.repo.owner,
                name: context.repo.repo
              });
            } catch (error) {
              console.log('GraphQL query failed:', error.message);
              console.log('Full error:', JSON.stringify(error, null, 2));
              console.log('Falling back to regular issue creation');
              
              const issue = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: 'Setup Repository Properties',
                body: issueBody,
                labels: ['setup', 'automation', 'copilot-task']
              });
              
              console.log(`Created setup issue #${issue.data.number} (GraphQL failed, using fallback)`);
              return issue.data.html_url;
            }
            
            console.log('Repository ID:', repoData.repository.id);
            console.log('Available assignable actors:', JSON.stringify(repoData.repository.suggestedActors.nodes, null, 2));
            
            const copilotBot = repoData.repository.suggestedActors.nodes.find(
              node => node.login === 'copilot-swe-agent'
            );
            
            if (copilotBot) {
              console.log('Found Copilot agent:', JSON.stringify(copilotBot, null, 2));
            } else {
              console.log('Copilot agent (copilot-swe-agent) not found in suggested actors');
              console.log('Available logins:', repoData.repository.suggestedActors.nodes.map(n => n.login));
            }
            
            if (copilotBot) {
              console.log('Attempting to create issue and assign to Copilot...');
              // Create issue and assign to Copilot using GraphQL
              const createMutation = `
                mutation($repositoryId: ID!, $title: String!, $body: String!, $assigneeIds: [ID!]!) {
                  createIssue(input: {
                    repositoryId: $repositoryId,
                    title: $title,
                    body: $body,
                    assigneeIds: $assigneeIds
                  }) {
                    issue {
                      id
                      number
                      url
                      assignees(first: 10) {
                        nodes {
                          login
                        }
                      }
                    }
                  }
                }
              `;
              
              const issueResult = await github.graphql(createMutation, {
                repositoryId: repoData.repository.id,
                title: 'Setup Repository Properties',
                body: issueBody,
                assigneeIds: [copilotBot.id]
              });
              
              console.log('Issue created successfully:', JSON.stringify(issueResult.createIssue.issue, null, 2));
              console.log(`Created setup issue #${issueResult.createIssue.issue.number} assigned to Copilot agent`);
              return issueResult.createIssue.issue.url;
            } else {
              console.log('Using fallback: creating regular issue with labels (Copilot agent not available)');
              // Fallback: create regular issue with labels
              const issue = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: 'Setup Repository Properties',
                body: issueBody,
                labels: ['setup', 'automation', 'copilot-task']
              });
              
              console.log(`Created setup issue #${issue.data.number} (Copilot agent not available, using labels)`);
              return issue.data.html_url;
            }
