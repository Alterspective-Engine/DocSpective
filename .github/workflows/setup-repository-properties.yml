name: Setup Repository Properties

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      force_run:
        description: 'Force run even if properties exist'
        required: false
        default: false
        type: boolean

jobs:
  setup-properties:
    runs-on: ubuntu-latest
    if: github.run_number == 1 || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Authentication
        id: setup_auth
        run: |
          # Using user access token directly (TODO: move to secrets)
          echo "Using user access token"
          echo "token=ghu_trClkpgQpZpal9yoFGwIjtDTnHO2uG1EjPTa" >> $GITHUB_OUTPUT
          echo "auth_type=user_token" >> $GITHUB_OUTPUT
      
      - name: Debug Authentication and Permissions
        run: |
          echo "Repository owner: ${{ github.repository_owner }}"
          echo "Authentication type: ${{ steps.setup_auth.outputs.auth_type }}"
          echo "Token length: ${#GH_TOKEN}"
          
          # Check what permissions this token has
          echo "Checking token permissions..."
          gh api /user --jq '{login: .login, type: .type}' || echo "Failed to get user info"
          
          # Check repository access
          echo "Checking repository access..."
          gh api "/repos/${{ github.repository }}" --jq '{name: .name, permissions: .permissions}' || echo "Failed to get repository info"
        env:
          GH_TOKEN: ${{ steps.setup_auth.outputs.token }}
      
      - name: Check if properties already exist
        id: check_properties
        run: |
          echo "Checking if repository properties already exist..."
          
          # Use gh api to check for existing properties
          if gh api "/repos/${{ github.repository }}/properties/values" --jq '.[].property_name' | grep -q "role"; then
            echo "has_properties=true" >> $GITHUB_OUTPUT
            echo "✅ Found existing 'role' property - skipping setup"
          else
            echo "has_properties=false" >> $GITHUB_OUTPUT
            echo "❌ No 'role' property found - setup needed"
          fi
        env:
          GH_TOKEN: ${{ steps.setup_auth.outputs.token }}
      

      - name: Set repository properties automatically
        if: steps.check_properties.outputs.has_properties == 'false' || github.event.inputs.force_run == 'true'
        run: |
          echo "Setting repository properties automatically..."
          
          # Determine the role - default to 'spec' for new repositories
          REPO_ROLE="spec"
          REPO_SPEC="null"
          
          # Set instructions property to the template repository (source of truth)
          # Try to get template repository info from GitHub API
          echo "Attempting to identify template repository..."
          TEMPLATE_REPO=$(gh api "/repos/${{ github.repository }}" --jq '.template_repository.full_name // empty' 2>/dev/null || echo "")
          
          if [ -n "$TEMPLATE_REPO" ] && [ "$TEMPLATE_REPO" != "null" ]; then
            REPO_INSTRUCTIONS="$TEMPLATE_REPO"
            echo "✅ Detected template repository: $TEMPLATE_REPO"
          else
            REPO_INSTRUCTIONS=""
            echo "⚠️ Could not detect template repository - instructions property will be left unset"
            echo "   Manual configuration may be required"
          fi
          
          echo "Setting properties:"
          echo "  role: $REPO_ROLE"
          echo "  spec: $REPO_SPEC"
          echo "  instructions: ${REPO_INSTRUCTIONS:-"(unset)"}"
          
          # Create JSON payload for properties
          if [ -n "$REPO_INSTRUCTIONS" ]; then
            JSON_PAYLOAD='{"properties":[{"property_name":"role","value":"'$REPO_ROLE'"},{"property_name":"spec","value":'$REPO_SPEC'},{"property_name":"instructions","value":"'$REPO_INSTRUCTIONS'"}]}'
          else
            JSON_PAYLOAD='{"properties":[{"property_name":"role","value":"'$REPO_ROLE'"},{"property_name":"spec","value":'$REPO_SPEC'}]}'
          fi
          echo "Setting properties with payload: $JSON_PAYLOAD"
          
          # Set the properties using GitHub API
          if echo "$JSON_PAYLOAD" | gh api --method PATCH "/repos/${{ github.repository }}/properties/values" --input -; then
            echo "✅ Successfully set repository properties"
            echo "Repository is configured as a specification repository:"
            echo "  - role=spec (specification repository)"
            echo "  - spec=null (no parent spec)"
            echo "  - instructions=$REPO_INSTRUCTIONS (source of truth)"
          else
            echo "❌ Failed to set repository properties"
            echo "This might be due to insufficient permissions or missing custom property definitions"
            echo "Please check that custom properties 'role', 'spec', and 'instructions' are defined in your organization settings"
            exit 1
          fi
        env:
          GH_TOKEN: ${{ steps.setup_auth.outputs.token }}
